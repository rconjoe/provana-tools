// require('jest')
// require('jest-extended')
// const devutil = require('../lib/blocks/developerutilities')
// const util = require('../lib/util')
// const admin = require('../lib/admin')
// const clientauth = require('../lib/auth')

// jest.settimeout(30000)
// describe('tests admin sdk module', () => {
//   beforeeach(async () => {
//     await util.flushdb()
//     await util.flushauth()
//   })
//   it('creates an onboarded creator with given credentials', async () => {
//     await devutil.giveonboardedcreator('jest@creator.com', 'devutil-unit-test' , '12345abcde')
//     let methods = await clientauth.auth.fetchsigninmethodsforemail('jest@creator.com')
//     expect(methods.length).tobe(1)
//     let creator = await admin.auth.getuserbyemail('jest@creator.com')
//     let creatordbc = await admin.fs.collection('creators')
//       .doc(creator.uid)
//       .get()
//     expect(creatordbc.exists).tobetrue()
//     expect(creatordbc.data().account).tobetruthy()
//     expect(creatordbc.data().discord).tobetruthy()
//     expect(creatordbc.data().uid).toequal(creator.uid)
//     expect(creatordbc.data().username).toequal(creator.uid)
//   })
//   it('creates a supporter with the given credentials', async () => {
//     await devutil.givesupporter('jest@supporter.com', 'devutil-unit-test-supporter', '12345abcde')
//     let methods = await clientauth.auth.fetchsigninmethodsforemail('jest@supporter.com')
//     expect(methods.length).tobe(1)
//     let supporter = await admin.auth.getuserbyemail('jest@supporter.com')
//     let supporterdbc = await admin.fs.collection('supporters')
//       .doc(supporter.uid)
//       .get()
//     expect(supporterdbc.exists).tobetrue()
//     expect(supporterdbc.data().account).tobetruthy()
//     expect(supporterdbc.data().discord).tobetruthy()
//     expect(supporterdbc.data().uid).toequal(supporter.uid)
//     expect(supporterdbc.data().username).toequal(supporter.uid)
//   })
//   it('returns an invitation from a running provana api instance', async () => {
//     let inv = await devutil.giveinvitation()
//     expect(inv).tobetruthy()
//   })
// })
